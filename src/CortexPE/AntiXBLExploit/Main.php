<?php

declare(strict_types=1);

namespace CortexPE\AntiXBLExploit;

use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\event\Listener;
use pocketmine\event\server\DataPacketReceiveEvent;
use pocketmine\network\mcpe\protocol\LoginPacket;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;

class Main extends PluginBase implements Listener {
	/** @var string[] */
	private $data = [];

	public function onEnable() {
		$this->getServer()->getPluginManager()->registerEvents($this, $this);
		if(file_exists($this->getFileName())) {
			$this->data = json_decode(file_get_contents($this->getFileName()), true, 512, JSON_THROW_ON_ERROR);
		} else {
			$this->save();
		}
	}

	public function onCommand(CommandSender $sender, Command $command, string $label, array $args): bool {
		if(isset($args[0]) && $sender->hasPermission("axx.clear")) {
			unset($this->data[strtolower($args[0])]);
			$sender->sendMessage("Cleared XUID log for {$args[0]}");
			return true;
		}
		return false;
	}

	public function onDisable() {
		$this->save();
	}

	private function getFileName(): string {
		return $this->getDataFolder() . "data.json";
	}

	private function save(): void {
		file_put_contents($this->getFileName(), json_encode($this->data));
	}

	/**
	 * @param DataPacketReceiveEvent $ev
	 *
	 * @priority LOWEST
	 * @ignoreCancelled false
	 */
	public function onPacketReceive(DataPacketReceiveEvent $ev): void {
		$pk = $ev->getPacket();
		if(!$pk instanceof LoginPacket) return;
		$un = $pk->username;
		if(!Player::isValidUserName($un)) return;
		$l_un = strtolower($un);

		// we have different fake error messages to diagnose which one is getting triggered
		// close is used to prevent kicking an uninitialized player
		if($pk->xuid === null) {
			// You need to authenticate to Microsoft services.
			$ev->getPlayer()->close("", "disconnectionScreen.notAuthenticated");
			$this->getLogger()->info("Denied login from {$un}: Not authenticated");
			$ev->setCancelled();
			return;
		}

		$existing = $this->getServer()->getPlayerExact($un);
		if($existing instanceof Player && $un !== $existing->getName()){
			$ev->getPlayer()->close("", "disconnectionScreen.cantConnect");
			$this->getLogger()->info("Denied login from {$un} ({$pk->xuid}): Tried kicking off existing player with different IGN.");
			$ev->setCancelled();
			return;
		}
		
		$combo = "{$un}-{$pk->xuid}"; // case-sensitive + xuid
		if(isset($this->data[$l_un]) && $this->data[$l_un] !== $combo) {
			// Unable to connect to world.
			$ev->getPlayer()->close("", "disconnectionScreen.cantConnect");
			$this->getLogger()->info("Denied login from {$un}: Mismatching XUID");
			$ev->setCancelled();
			return;
		}

		$this->data[$l_un] = $combo;
	}
}
